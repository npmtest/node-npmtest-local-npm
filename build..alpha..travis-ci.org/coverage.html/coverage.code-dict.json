{"/home/travis/build/npmtest/node-npmtest-local-npm/test.js":"/* istanbul instrument in package npmtest_local_npm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-local-npm/lib.npmtest_local_npm.js":"/* istanbul instrument in package npmtest_local_npm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_local_npm = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_local_npm = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-local-npm/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-local-npm && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_local_npm */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_local_npm\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_local_npm.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_local_npm.rollup.js'] =\n            local.assetsDict['/assets.npmtest_local_npm.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_local_npm.__dirname + '/lib.npmtest_local_npm.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-local-npm/node_modules/local-npm/lib/index.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar path = require('path');\nvar semver = require('semver');\nvar request = require('request');\nvar Promise = require('bluebird');\nvar express = require('express');\nvar level = require('level');\nvar through = require('through2');\nvar logger = require('./logger');\nvar levels = require('./levels');\nvar crypto = require('crypto');\nvar mkdirp = require('mkdirp');\nvar morgan = require('morgan');\nvar proxy = require('express-http-proxy');\nvar compression = require('compression');\nvar favicon = require('serve-favicon');\n\nvar pkg = require('./../package.json');\nvar findVersion = require('./find-version');\nvar pouchServerLite = require('./pouchdb-server-lite');\n\n\nmodule.exports = function (argv) {\n  var FAT_REMOTE = argv.r;\n  var SKIM_REMOTE = argv.R;\n  var port = argv.p;\n  var pouchPort = argv.P;\n  var localBase = argv.u;\n  localBase = localBase.replace(/:5080$/, ':' + port); // port is configurable\n  var loglevel  = argv.l;\n  var directory = path.resolve(argv.d);\n  mkdirp.sync(directory);\n  loglevel = levels(loglevel);\n  var startingTimeout = 1000;\n  logger.silly('\\nWelcome!');\n  logger.info('To start using local-npm, just run: ');\n  logger.code('\\n  $ npm set registry ' + localBase);\n  logger.info('\\nTo switch back, you can run: ');\n  logger.code('\\n  $ npm set registry ' + FAT_REMOTE);\n  var backoff = 1.1;\n  var app = express();\n  var PouchDB;\n\n  PouchDB = pouchServerLite(argv).PouchDB;\n\n  var skimRemote = new PouchDB(SKIM_REMOTE);\n  var skimLocal = new PouchDB('skimdb', {\n    auto_compaction: true\n  });\n  var db = level(path.resolve(directory, 'binarydb'));\n\n\n  if (loglevel > 1) {\n    app.use(morgan('dev'));\n  }\n  app.use(compression());\n  app.use(favicon(__dirname + '/favicon.ico'));\n\n  //\n  // rudimentary UI based on npm-browser\n  //\n  logger.info('\\nA simple npm-like UI is available here: http://127.0.0.1:' + port + '/_browse');\n\n  app.use('/_browse', express.static(__dirname + '/www'));\n  function redirectToSkimdb(req, res) {\n    var skimUrl = 'http://localhost:' + pouchPort + '/skimdb';\n    var get = request.get(req.originalUrl.replace(/^\\/_skimdb/, skimUrl));\n    get.on('error', function (err) {\n      logger.warn(\"couldn't proxy to skimdb\");\n      logger.warn(err);\n    });\n    get.pipe(res);\n  }\n  app.get('/_skimdb', redirectToSkimdb);\n  app.get('/_skimdb*', redirectToSkimdb);\n\n  app.get('/', function (req, res) {\n    Promise.all([skimLocal.info(), getCount()]).then(function (resp) {\n\n      res.json({\n        'local-npm': 'welcome',\n        version: pkg.version,\n        db: resp[0],\n        tarballs: resp[1]\n      });\n    });\n  });\n\n\n  //\n  // utils\n  //\n\n  function massageMetadata(urlBase, doc) {\n    var name = doc.name;\n    var versions = Object.keys(doc.versions);\n    for (var i = 0, len = versions.length; i < len; i++) {\n      var version = versions[i];\n      if (!semver.valid(version)) {\n        // apparently some npm modules like handlebars\n        // have invalid semver ranges, and npm deletes them\n        // on-the-fly\n        delete doc.versions[version];\n      } else {\n        var tgz = urlBase + '/' + 'tarballs/' + name + '/' + version + '.tgz';\n        doc.versions[version].dist.tarball = tgz;\n      }\n    }\n    return doc;\n  }\n\n  function sendBinary(res, buffer) {\n    res.set('content-type', 'application/octet-stream');\n    res.set('content-length', buffer.length);\n    return res.send(buffer);\n  }\n\n  function cacheResponse(res, etag) {\n    // do this to be more like registry.npmjs.com. not sure if it\n    // actually has a benefit, though\n    res.set('ETag', '\"' + etag + '\"');\n    res.set('Cache-Control', 'max-age=300');\n  }\n\n  // TODO: this is an error-prone way to check this. We should probably\n  // send an HTTP request to it and check the response to detect local-npm.\n  var fatRemoteIsAnotherLocalNpm =\n    FAT_REMOTE !== 'https://registry.npmjs.org' &&\n    FAT_REMOTE !== 'https://registry.npmjs.org/' &&\n    FAT_REMOTE !== 'http://registry.npmjs.org' &&\n    FAT_REMOTE !== 'http://registry.npmjs.org/';\n\n  //\n  // actual server logic\n  //\n  app.get('/:name/:version', function (req, res) {\n    skimLocal.get(req.params.name).catch(function () {\n      return skimRemote.get(req.params.name);\n    }).then(function (doc) {\n      var packageMetadata = massageMetadata(localBase, doc);\n      var versionMetadata = findVersion(packageMetadata, req.params.version);\n      if (versionMetadata) {\n        cacheResponse(res, doc._rev);\n        res.json(versionMetadata);\n      } else {\n        res.status(404).json({\n          error: 'version not found: ' + req.params.version\n        });\n      }\n    }).catch(function () {\n      request.get(FAT_REMOTE + req.url)\n          .on('error', function(err) {\n            logger.warn('error getting data for package:' + req.params.name + 'version: '+req.params.version + ' with error:'+err);\n            res.status(500).json({\n              error: 'error getting data for package:' + req.params.name + 'version: '+req.params.version\n            });\n          })\n          .pipe(res);\n    });\n  });\n  app.get('/:name', function (req, res) {\n    var name = req.params.name;\n    logger.time('1: skimLocal.get(' + name + ')');\n    skimLocal.get(name).catch(function () {\n      return skimRemote.get(name);\n    }).then(function (doc) {\n      var modifiedDoc = massageMetadata(localBase, doc);\n      logger.timeEnd('1: skimLocal.get(' + name + ')');\n      cacheResponse(res, doc._rev);\n      res.json(modifiedDoc);\n    }).catch(function () {\n      request.get(FAT_REMOTE + req.url)\n          .on('error', function(err) {\n            logger.warn('error getting data for package:' + name + ' error: '+err);\n            res.status(500).json({\n              error: 'error getting data for package:' + name\n            });\n          })\n          .pipe(res);\n    });\n  });\n  app.get('/tarballs/:name/:version.tgz', function (req, res) {\n\n    var pkgName = req.params.name;\n    var pkgVersion = req.params.version;\n    var id = pkgName + '-' + pkgVersion;\n\n    logger.time('2: skimLocal.get(' + pkgName + ')');\n    skimLocal.get(pkgName).catch(function () {\n      return skimRemote.get(pkgName);\n    }).catch(function () {\n      res.status(500).send(\"you are offline and skimdb isn\\'t replicated yet\");\n      throw new Error('offline');\n    }).then(function (doc) {\n      logger.timeEnd('2: skimLocal.get(' + pkgName + ')');\n      // if we're daisy-chaining multiple local-npm's together,\n      // then the remote tarball URL has to be swapped on-the-fly\n      if (fatRemoteIsAnotherLocalNpm) {\n        doc = massageMetadata(FAT_REMOTE, doc);\n      }\n      var dist = doc.versions[pkgVersion].dist;\n      logger.time('db.get(' + id + ')');\n      db.get(id, {asBuffer: true, valueEncoding: 'binary'}, function (err, buffer) {\n        logger.timeEnd('db.get(' + id + ')');\n        if (!err) {\n          var hash = crypto.createHash('sha1');\n          hash.update(buffer);\n          if (dist.shasum !== hash.digest('hex')) {\n            // happens when we write garbage to disk somehow\n            logger.warn('hashes don\\'t match, not returning');\n          } else {\n            logger.hit(pkgName, pkgVersion);\n            return sendBinary(res, buffer);\n          }\n        }\n        logger.miss(pkgName, pkgVersion);\n        var buffs = [];\n        logger.time('request.get(' + dist.tarball + ')');\n        request.get(dist.tarball).on('error', function (err) {\n          logger.info(err);\n          res.status(500).send('you are offline and this package isn\\'t cached');\n        }).pipe(through(function (chunk, _, next) {\n          buffs.push(chunk);\n          next();\n        }, function (next) {\n          next();\n          var buffer = Buffer.concat(buffs);\n          logger.timeEnd('request.get(' + dist.tarball + ')');\n          sendBinary(res, buffer);\n          db.put(id, buffer, function (err) {\n            logger.cached(pkgName, pkgVersion);\n            if (err) {\n              logger.info(err);\n            }\n          });\n        }));\n      });\n    }).catch(function (err) {\n      logger.info(err);\n    });\n  });\n  app.get('/*', function (req, res) {\n    res.redirect(FAT_REMOTE + req.originalUrl);\n  });\n  app.put('/*', proxy(FAT_REMOTE));\n\n  var sync;\n  function replicateSkim() {\n    skimRemote.info().then(function (info) {\n      sync = skimLocal.replicate.from(skimRemote, {\n        live: true,\n        batch_size: 200,\n        retry: true\n      }).on('change', function (change) {\n        startingTimeout = 1000;\n        var percent = Math.min(100,\n          (Math.floor(change.last_seq / info.update_seq * 10000) / 100).toFixed(2));\n        logger.status(change.last_seq, percent);\n      }).on('error', /* istanbul ignore next */ function (err) {\n        // shouldn't happen\n        logger.warn(err);\n        logger.warn('Error during replication with ' + SKIM_REMOTE);\n      });\n    }).catch(function (err) {\n      logger.warn(err);\n      logger.warn('Error fetching info() from ' + SKIM_REMOTE +\n        ', retrying after ' + Math.round(startingTimeout) + ' ms...');\n      restartReplication();\n    });\n  }\n  function restartReplication() {\n    // just keep going\n    startingTimeout *= backoff;\n    setTimeout(replicateSkim, Math.round(startingTimeout));\n  }\n  function getCount() {\n    return new Promise(function (fulfill, reject) {\n      var i = 0;\n      db.createKeyStream()\n      .on('data', function () {\n        i++;\n      }).on('end', function () {\n        fulfill(i);\n      }).on('error', reject);\n    });\n  }\n  replicateSkim();\n\n  app.listen(port);\n\n  process.on('SIGINT', function () {\n    // `sync` can be undefined if you start the process while offline and\n    // then immediately Ctrl-C it before you go online\n    if (sync) {\n      // close gracefully\n      sync.cancel();\n    }\n\n    Promise.all([\n      db.close(),\n      skimLocal.close()\n    ]).catch(null).then(function () {\n      process.exit();\n    });\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-local-npm/node_modules/local-npm/lib/logger.js":"'use strict';\n\nrequire('colors');\nvar argv = require('yargs').argv;\nvar level  = require('./levels')(argv.l);\n\nfunction log(msg) {\n  console.log(msg);\n}\n\nfunction wrap(thing) {\n  // this is just to be safe\n  /* istanbul ignore if */\n  if (typeof thing === 'undefined') {\n    return 'undefined';\n  }\n  /* istanbul ignore if */\n  if (typeof thing.toString !== 'function') {\n    return String.prototype.toString.call(thing);\n  }\n\n  return thing.toString();\n}\n\nexports.time = function (msg) {\n  msg = wrap(msg);\n  if (level > 2) {\n    console.time(msg);\n  }\n};\nexports.timeEnd = function (msg) {\n  msg = wrap(msg);\n  if (level > 2) {\n    console.timeEnd(msg);\n  }\n};\nexports.info = function (msg) {\n  msg = wrap(msg);\n  if (level > 1) {\n    log(msg.cyan);\n  }\n};\nexports.code = function (msg) {\n  msg = wrap(msg);\n  if (level > 1) {\n    log(msg.white);\n  }\n};\nexports.silly = function (msg) {\n  msg = wrap(msg);\n  if (level > 1) {\n    log(msg.rainbow.bold);\n  }\n};\n/* istanbul ignore next */\nexports.error = function (msg) {\n  msg = wrap(msg);\n  log(msg.red);\n};\nexports.status = function (seq, percent) {\n  if (level > 1) {\n    log('Replicating skimdb, last_seq is: '.grey + String(seq).green +\n      ' ('.grey + String(percent).green + '%'.green + ')'.grey);\n  }\n};\n\nexports.hit = function (pkg, version) {\n  if (level > 1) {\n    log('found tarball for '.grey + pkg.green + ' at version '.grey +\n      version.green);\n  }\n};\nexports.miss = function (pkg, version) {\n  if (level > 1) {\n    log('not cached '.grey + pkg.green + ' at version '.grey + version.green +\n      ', downloading...'.grey);\n  }\n};\nexports.cached = function (pkg, version) {\n  if (level > 1) {\n    log('downloaded '.grey + pkg.green + ' at version '.grey + version.green +\n      ' and saved it locally'.grey);\n  }\n};\nexports.warn = function (msg) {\n  msg = wrap(msg);\n  if (level > 0) {\n    log(msg.yellow); \n  }\n};","/home/travis/build/npmtest/node-npmtest-local-npm/node_modules/local-npm/lib/levels.js":"'use strict';\nvar levels = {\n  error: 0,\n  warn: 1,\n  info: 2,\n  debug: 3\n};\nmodule.exports = function (level) {\n  /* istanbul ignore else */\n  if (typeof levels[level] === 'number') {\n    return levels[level];\n  }\n\n  // The following are convenience methods so that you can use the standard\n  // NODE_ENV variable and local-npm will react sensibly. The default is \"info\".\n\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV && process.env.NODE_ENV in levels) {\n    return levels[process.env.NODE_ENV];\n  }\n  /* istanbul ignore next */\n  if (process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'prod' ) {\n    return 0;\n  }\n  /* istanbul ignore next */\n  if (typeof process.env.NODE_ENV === 'undefined' ||\n    process.env.NODE_ENV === 'development' || process.env.NODE_ENV === 'dev') {\n    return 2;\n  }\n};","/home/travis/build/npmtest/node-npmtest-local-npm/node_modules/local-npm/lib/find-version.js":"'use strict';\n\nvar semver = require('semver');\n\n// find the first version in the package metadata that satisfies\n// the query version. e.g. if the latest is 1.2.3, then \"1\", \"1.2\", and \"1.2.3\"\n// should all work\nmodule.exports = function findVersion(meta, version) {\n  if (version === 'latest') {\n    var latestVersion = Object.keys(meta.versions).filter(function (otherVersion) {\n      return semver.valid(otherVersion);\n    }).sort(function (a, b) {\n      return semver.gt(a, b) ? -1 : 1;\n    })[0];\n    return meta.versions[latestVersion];\n  }\n  if (meta.versions[version]) {\n    return meta.versions[version];\n  }\n  var versions = Object.keys(meta.versions).filter(function (otherVersion) {\n    return semver.valid(otherVersion) && semver.satisfies(otherVersion, version);\n  }).sort(function (a, b) {\n    return semver.gt(a, b) ? -1 : 1;\n  });\n  return meta.versions[versions[0]];\n};\n","/home/travis/build/npmtest/node-npmtest-local-npm/node_modules/local-npm/lib/pouchdb-server-lite.js":"#!/usr/bin/env node\n\n'use strict';\n\nvar express = require('express');\nvar corser  = require('corser');\nvar favicon = require('serve-favicon');\nvar logger = require('./logger');\nvar path = require('path');\nvar fs = require('fs');\nvar compression = require('compression');\nvar morgan = require('morgan');\nvar expressPouchDB = require('express-pouchdb');\nvar PouchDB = require('pouchdb');\n\nvar levels = require('./levels');\n\nmodule.exports = function (argv) {\n  var port    = argv.P;\n  var directory  = path.resolve(argv.d);\n  var loglevel  = levels(argv.l);\n  var app     = express();\n\n  app.use(favicon(__dirname + '/favicon.ico'));\n  app.use(compression());\n\n  if (loglevel > 1) {\n    app.use(morgan('dev'));\n  }\n  app.use(corser.create({\n    methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE'],\n    supportsCredentials: true,\n    requestHeaders: corser.simpleRequestHeaders.concat([\"Authorization\", \"Origin\", \"Referer\"])\n  }));\n\n  // set up express-pouchdb with the prefix (directory)\n  var ScopedPouchDB = PouchDB.defaults({prefix: directory + '/'});\n  var configFile = path.resolve(directory, 'config.json');\n  var logFile = path.resolve(directory, 'log.txt');\n  // hacky, but there doesn't seem to be any other way to prefix the log file\n  fs.writeFileSync(configFile, JSON.stringify({log: {file: logFile}}), 'utf-8');\n  var pouchDBApp = expressPouchDB({ configPath: configFile });\n  pouchDBApp.setPouchDB(ScopedPouchDB);\n  app.use(pouchDBApp);\n\n  app.listen(port, function () {\n    logger.info('\\nPouchDB Server listening on port ' + port + '.');\n    logger.info('Navigate to http://localhost:' + port + '/_utils for the Fauxton UI.\\n');\n  }).on('error', /* istanbul ignore next */ function (e) {\n    if (e.code === 'EADDRINUSE') {\n      logger.error('\\nError: Port ' + port + ' is already in use.');\n      logger.error('Try another one, e.g. pouchdb-server -p ' +\n        (parseInt(port) + 1) + '\\n');\n    } else {\n      logger.error('Uncaught error: ' + e);\n      logger.error(e.stack);\n    }\n  });\n\n  return {\n    app: app,\n    PouchDB: ScopedPouchDB\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-local-npm/node_modules/local-npm/lib/bin.js":"#!/usr/bin/env node\n\n'use strict';\nvar yargs = require('yargs')\n   .boolean('h')\n  .alias('h', 'help')\n  .describe('h', 'this help message')\n  .default('p', 5080)\n  .alias('p', 'port')\n  .describe('p', 'port')\n  .default('P', 16984)\n  .alias('P', 'pouch-port')\n  .describe('P', 'pouchdb-server port')\n  .alias('l', 'log')\n  .describe('l', 'error|warn|info|debug')\n  .default('l', 'info')\n  .default('r', 'https://registry.npmjs.org')\n  .alias('r', 'remote')\n  .describe('r', 'remote fullfatdb')\n  .default('R', 'https://skimdb.npmjs.com/registry')\n  .alias('R', 'remote-skim')\n  .describe('R', 'remote skimdb')\n  .default('u', 'http://127.0.0.1:5080')\n  .alias('u', 'url-base')\n  .describe('u', 'base url it will be hosted on')\n  .default('d', './')\n  .alias('d', 'directory')\n  .describe('directory', 'directory to store data')\n  .version(require('./../package.json').version, 'v')\n  .alias('v', 'version')\n  .example('$0 -u http://foo.com -p 3000',\n    'run on port 3000 and visable at foo.com');\n\nvar argv = yargs.argv;\n\nif (argv.h) {\n  yargs.showHelp();\n  process.exit(0);\n}\n\n\nrequire('./index')(argv);\n"}